-- CISC 360 a1, Fall 2022

module A1 where

-- Q1:
-- Add your student ID:
student_id :: Integer
student_id = 20226046

-- THIS FILE WILL NOT COMPILE UNTIL YOU ADD YOUR STUDENT ID ABOVE


{-
Q2:
   square m n  ==  True
   if and only if
                           2
     n is m squared  (n = m )

     or
                           2
     m is n squared  (m = n )
-}
square :: Integer -> Integer -> Bool
square m n
  |m==n*n  =True
  |n==m*m  =True
  |otherwise = False

{-
  Testing square:

  CISC 360 CONVENTION:
  Every variable beginning with "test_" should evaluate to True.
  So test_square1 should be True because  square 1 (-1)  should equal True,
  test_square2 should be True because  (square 5 2)  should equal False,
  and so on.
-}
test_square1, test_square2, test_square3, test_square4, test_square5, test_square6 :: Bool
test_square1 = (square 1 (-1)) == True
test_square2 = (square 5 2) == False
test_square3 = (square (-2) 0) == False
test_square4 = (square 2 5) == False
test_square5 = (square 65536 256) == True
test_square6 = (square 65536 255) == False

-- Do all tests together
test_square :: Bool
test_square = test_square1 && test_square2
                           && test_square3
                           && test_square4
                           && test_square5
                           && test_square6

{-
Q3:
  `spiral': given a pair of numbers `dir' and `span',
  returns 1 if `dir' is less than or equal to 1,
  and otherwise returns (span - dir) * spiral (dir - 2, span - 3).
-}

spiral :: (Integer, Integer) -> Integer
spiral (dir, span) = if dir <= 1 then 1 else (span - dir) * spiral (dir - 2, span - 3)

-- Testing spiral:
test_spiral1, test_spiral2, test_spiral3, test_spiral :: Bool
test_spiral1 = (spiral (0, 32)  == 1)
test_spiral2 = (spiral (-32, 5) == 1)
test_spiral3 = (spiral (7, 50)  == 74046)
test_spiral4 = (spiral (13, 3)  == 3603600)

test_spiral  = test_spiral1 && test_spiral2 && test_spiral3 && test_spiral4


{-
Q4:
  spiral_seq n == string containing results of spiral(k, 360) for k in 1, ..., n
                   separated by semicolons

  For example,  spiral_seq 3  should return  "1;358;357"
    because spiral (1, 360) should return 1,
            spiral (2, 360) should return 358,
        and spiral (3, 360) should return 357.

  If n < 1, spiral_seq should return the empty string: ""

  Hints:
     1. The built-in function  show  converts an integer
        to its (decimal) representation as a string.

     2. You can use the built-in function  ++  to concatenate strings.
          For example, "10" ++ "," == "10,".

     3. You may find it useful to define a helper function for spiral_seq to call.
-}
spiral_seq :: Integer -> String
spiral_seq n
  |n<1 = ""
  |n == 1 = show (spiral(1,360)) 
  |n > 1 =  show (spiral(n,360)) ++ ";" spiral_seq (n-1)
  



{-
Q5: Stepping

   Give your answers by filling in the blanks below,
   and **including the substitution** in function application steps, as described.

Q5.1: Replace the underlines (_______).

     expression                   justification

     (\q -> q + (q * 9)) 2

  => _________________________    _________________________

  => _________________________    _________________________

  => _______                      by arithmetic

  For full marks, state the substitution in the function application step.
  For example:

  "...                          by function application
                                with 500 for q"
                                     ^^^^^^^^^
                          "500 for q" is the substitution

Q5.2: Replace the underlines (_______).
      Assume a function `incr' has been defined:
-}
incr :: Integer -> Integer
incr x = x + 1
{-
     expression                            justification

     ((\g -> (\t -> g 2)) incr) 5

  => ____________________________________  ______________________________

  => ____________________________________  ______________________________

  => ____________________________________  ______________________________

  => ____________________________________  ______________________________

  For full marks, state the substitution in all function application steps.

Q5.3:
  Step the following expression.  (It can only be stepped once.)
  (You cannot directly check the answer in Haskell,
   because Haskell will not print functions,
   so it will not print a pair that contains a function.)

     expression                            justification

     (\x -> (x, 1)) incr

  => ____________________________________  ________________________________
-}
